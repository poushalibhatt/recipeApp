{"version":3,"sources":["Recipe.jsx","App.js","reportWebVitals.js","index.js"],"names":["Recipe","label","calori","image","totalTime","class","className","style","width","src","alt","App","useState","recipes","setRecipe","search","setSearch","result","setResult","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","id","onSubmit","e","preventDefault","type","value","onChange","target","map","recipe","calories","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAoBeA,EAlBJ,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,UACnC,OACI,qBAAKC,MAAM,MAAX,SACI,qBAAKA,MAAM,WAAX,SACI,sBAAKC,UAAU,OAAOC,MAAO,CAACC,MAAO,SAArC,UACI,qBAAKF,UAAU,eAAeG,IAAKN,EAAOO,IAAKT,IAC/C,sBAAKK,UAAU,YAAf,UACI,wBAAQA,UAAU,aAAlB,SAAgCL,IAChC,oBAAGK,UAAU,YAAb,UAAyB,gDAAzB,IAAsDJ,KACtD,oBAAGI,UAAU,YAAb,UAAyB,kDAA8BF,gB,MCoC5DO,MA1Cf,WACE,IADa,EAIcC,mBAAS,IAJvB,mBAINC,EAJM,KAIGC,EAJH,OAKaF,mBAAS,IALtB,mBAKNG,EALM,KAKEC,EALF,OAMaJ,mBAAS,WANtB,mBAMNK,EANM,KAMEC,EANF,KAQbC,qBAAU,WACRC,MACA,CAACH,IAEH,IAAIG,EAAU,uCAAC,8BAAAC,EAAA,sEACOC,MAAM,mCAAD,OAAoCL,EAApC,mBAZf,WAYe,oBAXb,qCAUC,cACTM,EADS,gBAEGA,EAASC,OAFZ,OAETC,EAFS,OAGbX,EAAUW,EAAKC,MACfC,QAAQC,IAAIH,EAAKC,MAJJ,2CAAD,qDAad,OACE,sBAAKpB,UAAU,MAAf,UACE,uBAAMuB,GAAG,cAAcC,SARd,SAACC,GACbA,EAAEC,iBACFd,EAAUH,GACVC,EAAU,KAKP,UACE,uBAAOa,GAAG,eAAeI,KAAK,OAAOC,MAAOnB,EAAQoB,SAAU,SAACJ,GAAD,OAAKf,EAAUe,EAAEK,OAAOF,UACtF,wBAAQL,GAAG,gBAAgBI,KAAK,SAAS3B,UAAU,eAAnD,uBAEF,qBAAKA,UAAU,UAAf,SACCO,EAAQwB,KAAI,SAAAC,GAAM,OACjB,cAAC,EAAD,CAAQrC,MAAOqC,EAAOA,OAAOrC,MAAOC,OAAQoC,EAAOA,OAAOC,SAAUpC,MAAOmC,EAAOA,OAAOnC,MACzFC,UAAWkC,EAAOA,OAAOlC,qBC3BlBoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.82a43a9d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nlet Recipe=({label, calori, image, totalTime})=>{\r\nreturn(\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-6\">\r\n            <div className=\"card\" style={{width: '20rem'}}>\r\n                <img className=\"card-img-top\" src={image} alt={label}/>\r\n                <div className=\"card-body\">\r\n                    <strong className=\"card-title\">{label}</strong>\r\n                    <p className=\"card-text\"><strong>Calories- </strong> {calori}</p>\r\n                    <p className=\"card-text\"><strong>Total Time- </strong>{totalTime}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\n}\r\n\r\nexport default Recipe","import React,{useEffect, useState} from 'react';\nimport Recipe from './Recipe';\nimport './App.css'; \n\n\nfunction App() {\n  let APP_ID= \"aca47902\";\n  let APP_Keys= \"5e69039a0a76b58929dc28a01dbf5ce7\";\n\n  const [recipes, setRecipe]=useState([])\n  const [search, setSearch]=useState('')\n  const [result, setResult]=useState('chicken')\n\n  useEffect(()=>{\n    getRecipes()\n  },[result])\n\n  let getRecipes=async()=>{\n    let response= await fetch(`https://api.edamam.com/search?q=${result}&app_id=${APP_ID}&app_key=${APP_Keys}`)\n    let data= await response.json();\n    setRecipe(data.hits);\n    console.log(data.hits);\n }\n\n let getResult=(e)=>{\n   e.preventDefault()\n   setResult(search)\n   setSearch('')\n }\n\n  return (\n    <div className=\"App\">\n      <form id='form-search' onSubmit={getResult}>\n        <input id='input-search' type='text' value={search} onChange={(e)=>setSearch(e.target.value)}/>\n        <button id='button-search' type='submit' className=\"btn btn-dark\">Search</button>\n      </form>\n      <div className='recipes'>\n      {recipes.map(recipe => (\n        <Recipe label={recipe.recipe.label} calori={recipe.recipe.calories} image={recipe.recipe.image}\n        totalTime={recipe.recipe.totalTime}\n        />\n      ))}\n      </div>\n    </div>\n  )\n      }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}